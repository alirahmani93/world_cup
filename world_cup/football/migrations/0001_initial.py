# Generated by Django 4.1.2 on 2022-11-10 15:41

import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Match',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, verbose_name='UUID')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('updated_time', models.DateTimeField(auto_now=True, verbose_name='Updated time')),
                ('created_time', models.DateTimeField(auto_now_add=True, verbose_name='Created time')),
                ('start_time', models.DateTimeField(verbose_name='start time')),
                ('end_time', models.DateTimeField(blank=True, null=True, verbose_name='end time')),
                ('level', models.IntegerField(choices=[(0, 'Preliminary'), (1, '1/16'), (2, '1/8'), (3, 'Semi Final'), (4, 'Final')], verbose_name='level')),
                ('status', models.IntegerField(choices=[(2, 'Not Started'), (0, 'Running'), (1, 'Finished'), (3, 'Incomplete')], default=2, verbose_name='status')),
                ('winner', models.IntegerField(blank=True, choices=[(0, 'Draw'), (1, 'Team 1'), (2, 'Team 2')], null=True, verbose_name='winner')),
                ('is_penalty', models.BooleanField(default=False, verbose_name='is penalty')),
                ('bracket_position', models.PositiveIntegerField(blank=True, null=True, unique=True, verbose_name='bracket position')),
            ],
            options={
                'verbose_name': 'Match',
                'verbose_name_plural': 'Matches',
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, verbose_name='UUID')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('updated_time', models.DateTimeField(auto_now=True, verbose_name='Updated time')),
                ('created_time', models.DateTimeField(auto_now_add=True, verbose_name='Created time')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('continent', models.IntegerField(choices=[(0, 'Asia'), (1, 'Europe'), (2, 'Africa'), (3, 'North America'), (4, 'South America'), (5, 'South Oceania')], verbose_name='continent')),
                ('group', models.IntegerField(choices=[(0, 'A'), (1, 'B'), (2, 'C'), (3, 'D'), (4, 'E'), (5, 'F'), (6, 'G'), (7, 'H')], verbose_name='group')),
                ('current_level', models.IntegerField(choices=[(0, 'Preliminary'), (1, '1/16'), (2, '1/8'), (3, 'Semi Final'), (4, 'Final')], default=0, verbose_name='current level')),
            ],
            options={
                'verbose_name': 'Team',
                'verbose_name_plural': 'Teams',
            },
        ),
        migrations.CreateModel(
            name='TeamPlayer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, verbose_name='UUID')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('updated_time', models.DateTimeField(auto_now=True, verbose_name='Updated time')),
                ('created_time', models.DateTimeField(auto_now_add=True, verbose_name='Created time')),
                ('first_name', models.CharField(max_length=255, verbose_name='first name')),
                ('last_name', models.CharField(max_length=255, verbose_name='last name')),
                ('number', models.PositiveBigIntegerField(validators=[django.core.validators.MaxValueValidator(100)], verbose_name='number')),
                ('is_banned_next_match', models.BooleanField(default=False, verbose_name='is banned next match')),
                ('rank', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(10.0)], verbose_name='rank')),
                ('key', models.CharField(max_length=255, unique=True, verbose_name='key')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='football.team', verbose_name='team')),
            ],
            options={
                'unique_together': {('first_name', 'last_name', 'team')},
            },
        ),
        migrations.CreateModel(
            name='MatchResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, verbose_name='UUID')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('updated_time', models.DateTimeField(auto_now=True, verbose_name='Updated time')),
                ('created_time', models.DateTimeField(auto_now_add=True, verbose_name='Created time')),
                ('winner', models.IntegerField(choices=[(0, 'Draw'), (1, 'Team 1'), (2, 'Team 2')], verbose_name='winner')),
                ('is_penalty', models.BooleanField(default=False, verbose_name='is penalty')),
                ('team_1_goals', models.PositiveIntegerField(verbose_name='team 1 goals')),
                ('team_2_goals', models.PositiveIntegerField(verbose_name='team 2 goals')),
                ('best_player_id', models.IntegerField(verbose_name='best player id')),
                ('arrange_1_list', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), size=None, verbose_name='arrange 1 list')),
                ('arrange_2_list', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), size=None, verbose_name='arrange 2 list')),
                ('goal_1_list', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), size=None, verbose_name='goal 1 list')),
                ('goal_2_list', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), size=None, verbose_name='goal 2 list')),
                ('goal_assist_1_list', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), size=None, verbose_name='goal assist 1 list')),
                ('goal_assist_2_list', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), size=None, verbose_name='goal assist 2 list')),
                ('yellow_card_1_list', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), size=None, verbose_name='yellow card 1 list')),
                ('yellow_card_2_list', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), size=None, verbose_name='yellow card 2 list')),
                ('red_card_1_list', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), size=None, verbose_name='red card 1 list')),
                ('red_card_2_list', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), size=None, verbose_name='red card 2 list')),
                ('change_1_list', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), size=None, verbose_name='change 1 list')),
                ('change_2_list', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), size=None, verbose_name='change 2 list')),
                ('is_processed', models.BooleanField(default=False, help_text='after all player predicts calculated change to True', verbose_name='is processed')),
                ('match', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='football.match', verbose_name='match')),
            ],
            options={
                'verbose_name': 'Match Result',
                'verbose_name_plural': 'Match Results',
            },
        ),
        migrations.AddField(
            model_name='match',
            name='team_1',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team1', to='football.team', verbose_name='team 1'),
        ),
        migrations.AddField(
            model_name='match',
            name='team_2',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team2', to='football.team', verbose_name='team 2'),
        ),
        migrations.CreateModel(
            name='TeamPlayerAction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, verbose_name='UUID')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('updated_time', models.DateTimeField(auto_now=True, verbose_name='Updated time')),
                ('created_time', models.DateTimeField(auto_now_add=True, verbose_name='Created time')),
                ('role', models.IntegerField(choices=[(0, 'GK'), (1, 'LB'), (2, 'RB'), (3, 'LCB'), (4, 'RCB'), (5, 'CDM'), (6, 'LCM'), (7, 'RCM'), (8, 'RW'), (9, 'LW'), (10, 'ST')], verbose_name='role')),
                ('yellow_card', models.BooleanField(default=False, verbose_name='yellow card')),
                ('red_card', models.BooleanField(default=False, verbose_name='red card')),
                ('goal', models.PositiveSmallIntegerField(default=0, verbose_name='goal')),
                ('assist_goal', models.PositiveSmallIntegerField(default=0, verbose_name='assist goal')),
                ('is_change', models.BooleanField(default=False, verbose_name='is change')),
                ('is_best_player', models.BooleanField(default=False, verbose_name='is best player')),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='football.match', verbose_name='match')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='football.teamplayer', verbose_name='player')),
            ],
            options={
                'verbose_name': 'Action Team Player',
                'verbose_name_plural': 'Action Team Players',
                'unique_together': {('match', 'player')},
            },
        ),
    ]
