version: '3.9'

services:
  db:
    image: postgres:14.4-alpine
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    env_file:
      - ./.env
    restart: unless-stopped
    container_name: postgres_wo
    volumes:
      - postgres_data:/var/lib/postgresql/data/

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4:latest
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - ${PGADMIN_PORT}:80
    restart: "unless-stopped"
    env_file:
      - ./.env

  redis:
    image: redis:latest
    container_name: redis_wo
    ports:
      - ${REDIS_PORT}:6379
    restart: unless-stopped
    command: redis-server --save ${REDIS_DUMP_INTERVAL} 1 --loglevel warning --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis:/data


  web:
#    build: .
    image: world_cup:4
    command: sh -c "python manage.py migrate &&
      python manage.py setup &&
      yes | python manage.py collectstatic --no-input &&
      celery -A ${PROJECT_NAME} worker --loglevel=info --without-mingle -Ofair -l INFO --logfile=logs/celery.log  --concurrency=${CELERY_CONCURRENCY} -n worker1@%h --detach &&
      celery -A ${PROJECT_NAME} worker --loglevel=info --without-mingle -Ofair -l INFO --logfile=logs/celery.log  --concurrency=${CELERY_CONCURRENCY} -n worker1@%h --detach &&
      celery -A ${PROJECT_NAME} worker --loglevel=info --without-mingle -Ofair -l INFO --logfile=logs/celery.log  --concurrency=${CELERY_CONCURRENCY} -n worker1@%h --detach &&
      celery -A ${PROJECT_NAME} worker --loglevel=info --without-mingle -Ofair -l INFO --logfile=logs/celery.log  --concurrency=${CELERY_CONCURRENCY} -n worker1@%h --detach &&
      gunicorn ${PROJECT_NAME}.wsgi:application --workers=${GUNICORN_WORKERS} --access-logfile=/tmp/gunicorn.log --bind 0.0.0.0:${GUNICORN_PORT}"

    volumes:
      - .:/app
      - ./logs/:/app/logs/
      - static_volume:/app/static
      - media_volume:/app/media
    container_name: ${PROJECT_NAME}
    ports:
      - ${GUNICORN_PORT}:8000
    env_file:
      - ./.env
    depends_on:
      - db
    restart: unless-stopped

  nginx:
    image: nginx:1.23.0-alpine
    ports:
      - 81:80
      - 444:443
      - 888:888
    restart: unless-stopped
    container_name: nginx_wo
    volumes:
      - static_volume:/app/static
      - media_volume:/app/media
      - ./nginx/conf/:/etc/nginx/conf.d/:rw
      - ./nginx/templates/:/etc/nginx/templates/:ro
    #      - ../certbot/www:/var/www/certbot/:ro
    #      - ../certbot/conf/:/etc/nginx/ssl/:ro
    env_file:
      - ./.env
    depends_on:
      - web
    healthcheck:
      test: [ "CMD", "curl", "-f", "${WEB_PROTOCOL}://${SITE_URL}/" ]
      interval: 10s
      timeout: 5s
      retries: 5
    extra_hosts:
      - "host.docker.internal:host-gateway"


#  certbot:
#    image: certbot/certbot:latest
#    container_name: certbot_wo
#    volumes:
#      - ../certbot/www/:/var/www/certbot/:rw
#      - ../certbot/conf/:/etc/letsencrypt/:rw

volumes:
  static_volume:
  media_volume:
  postgres_data:
  pgadmin:
  redis:
    driver: local
